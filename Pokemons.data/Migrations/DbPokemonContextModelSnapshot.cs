// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pokemons.data;

#nullable disable

namespace Pokemons.data.Migrations
{
    [DbContext(typeof(DbPokemonContext))]
    partial class DbPokemonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pokemons")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AbilityFromPokemonPokemon", b =>
                {
                    b.Property<int>("AbilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonsId")
                        .HasColumnType("int");

                    b.HasKey("AbilitiesId", "PokemonsId");

                    b.HasIndex("PokemonsId");

                    b.ToTable("AbilityFromPokemonPokemon", "pokemons");
                });

            modelBuilder.Entity("PokemonStatsFromPokemon", b =>
                {
                    b.Property<int>("PokemonsId")
                        .HasColumnType("int");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.HasKey("PokemonsId", "StatsId");

                    b.HasIndex("StatsId");

                    b.ToTable("PokemonStatsFromPokemon", "pokemons");
                });

            modelBuilder.Entity("PokemonTypeFromPokemon", b =>
                {
                    b.Property<int>("PokemonsId")
                        .HasColumnType("int");

                    b.Property<int>("TypesId")
                        .HasColumnType("int");

                    b.HasKey("PokemonsId", "TypesId");

                    b.HasIndex("TypesId");

                    b.ToTable("PokemonTypeFromPokemon", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenerationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId");

                    b.ToTable("Abilities", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.AbilityFromPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityFromPokemon", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Generation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Generations", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId")
                        .IsUnique();

                    b.ToTable("Images", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenerationId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId");

                    b.ToTable("Pokemon", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stats", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.StatsFromPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseStat")
                        .HasColumnType("int");

                    b.Property<int>("Effort")
                        .HasColumnType("int");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatsId");

                    b.ToTable("StatsFromPokemon", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Types", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.TypeFromPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TypeFromPokemon", "pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "pokemons");
                });

            modelBuilder.Entity("AbilityFromPokemonPokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.AbilityFromPokemon", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemons.data.model.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonStatsFromPokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemons.data.model.StatsFromPokemon", null)
                        .WithMany()
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonTypeFromPokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pokemons.data.model.TypeFromPokemon", null)
                        .WithMany()
                        .HasForeignKey("TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pokemons.data.model.Ability", b =>
                {
                    b.HasOne("Pokemons.data.model.Generation", "Generation")
                        .WithMany("Abilities")
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("Pokemons.data.model.AbilityFromPokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.Ability", "Ability")
                        .WithMany("AbilityFromPokemons")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Pokemons.data.model.Image", b =>
                {
                    b.HasOne("Pokemons.data.model.Pokemon", "Pokemon")
                        .WithOne("Image")
                        .HasForeignKey("Pokemons.data.model.Image", "PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("Pokemons.data.model.Pokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.Generation", "Generation")
                        .WithMany("Pokemons")
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("Pokemons.data.model.StatsFromPokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.Stats", "Stats")
                        .WithMany("StatsFromPokemons")
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Pokemons.data.model.TypeFromPokemon", b =>
                {
                    b.HasOne("Pokemons.data.model.Type", "Type")
                        .WithMany("TypeFromPokemons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Pokemons.data.model.Ability", b =>
                {
                    b.Navigation("AbilityFromPokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Generation", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Pokemon", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Pokemons.data.model.Stats", b =>
                {
                    b.Navigation("StatsFromPokemons");
                });

            modelBuilder.Entity("Pokemons.data.model.Type", b =>
                {
                    b.Navigation("TypeFromPokemons");
                });
#pragma warning restore 612, 618
        }
    }
}
